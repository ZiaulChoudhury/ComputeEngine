/*
 * Generated by Bluespec Compiler (build f2da894e)
 * 
 * On Sat Jul 17 19:53:59 IST 2021
 * 
 */

/* Generation options: */
#ifndef __mkPermute_h__
#define __mkPermute_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkPermute module */
class MOD_mkPermute : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUWide> INST_i0;
  MOD_Reg<tUWide> INST_i1;
  MOD_Reg<tUWide> INST_i2;
  MOD_Reg<tUWide> INST_i3;
  MOD_Reg<tUInt32> INST_outR;
  MOD_CReg<tUInt8> INST_p0_rv;
  MOD_CReg<tUInt8> INST_p1_rv;
  MOD_CReg<tUInt8> INST_p2_rv;
  MOD_CReg<tUInt8> INST_p3_rv;
  MOD_CReg<tUInt8> INST_p4_rv;
  MOD_Reg<tUInt8> INST_probe;
  MOD_Reg<tUInt8> INST_sft;
  MOD_Reg<tUInt8> INST_stripIndex;
 
 /* Constructor */
 public:
  MOD_mkPermute(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_put_inR;
 
 /* Publicly accessible definitions */
 public:
 
 /* Local definitions */
 private:
  tUWide DEF_i0__h11487;
  tUWide DEF_i1__h22871;
  tUWide DEF_i2__h28703;
  tUWide DEF_i3__h31293;
  tUInt8 DEF_probe__h25972;
  tUWide DEF_i0_BITS_1023_TO_512___d4;
  tUWide DEF_i0_BITS_511_TO_0___d5;
  tUWide DEF_i1_BITS_511_TO_256___d9;
  tUWide DEF_i1_BITS_255_TO_0___d10;
  tUWide DEF_i2_3_BITS_255_TO_128___d14;
  tUWide DEF_i2_3_BITS_127_TO_0___d15;
  tUWide DEF_x__h30255;
  tUWide DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6;
  tUWide DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11;
  tUWide DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16;
 
 /* Rules */
 public:
  void RL__S0();
  void RL__S1();
  void RL__S2();
  void RL__S3();
 
 /* Methods */
 public:
  void METH_put(tUWide ARG_put_inR);
  tUInt8 METH_RDY_put();
  void METH_setIndex(tUInt8 ARG_setIndex_inx);
  tUInt8 METH_RDY_setIndex();
  tUInt32 METH_get();
  tUInt8 METH_RDY_get();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPermute &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkPermute &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkPermute &backing);
};

#endif /* ifndef __mkPermute_h__ */
