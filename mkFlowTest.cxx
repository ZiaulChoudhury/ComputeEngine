/*
 * Generated by Bluespec Compiler (build 00185f79)
 * 
 * On Sun May 23 21:16:52 IST 2021
 * 
 */
#include "bluesim_primitives.h"
#include "mkFlowTest.h"


/* Literal declarations */
static unsigned int const UWide_literal_512_h0_arr[] = { 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u };
static tUWide const UWide_literal_512_h0(512u, UWide_literal_512_h0_arr);
static unsigned int const UWide_literal_496_h0_arr[] = { 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u };
static tUWide const UWide_literal_496_h0(496u, UWide_literal_496_h0_arr);


/* String declarations */
static std::string const __str_literal_1(" %d ", 4u);


/* Constructor */
MOD_mkFlowTest::MOD_mkFlowTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_col(simHdl, "col", this, 32u, 0u, (tUInt8)0u),
    INST_count(simHdl, "count", this, 32u, 0u, (tUInt8)0u),
    INST_cx(simHdl, "cx", this, 10u, 0u, (tUInt8)0u),
    INST_idx(simHdl, "idx", this, 16u, 0u, (tUInt8)0u),
    INST_idx2(simHdl, "idx2", this, 16u, 0u, (tUInt8)0u),
    INST_idx3(simHdl, "idx3", this, 16u, 0u, (tUInt8)0u),
    INST_init(simHdl, "init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_init2(simHdl, "init2", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_px(simHdl, "px", this),
    INST_rx(simHdl, "rx", this, 10u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_px_get___d59(128u),
    DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56(512u),
    DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55(512u)
{
  symbol_count = 16u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFlowTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "col", SYM_MODULE, &INST_col);
  init_symbol(&symbols[1u], "count", SYM_MODULE, &INST_count);
  init_symbol(&symbols[2u], "cx", SYM_MODULE, &INST_cx);
  init_symbol(&symbols[3u], "idx", SYM_MODULE, &INST_idx);
  init_symbol(&symbols[4u], "idx2", SYM_MODULE, &INST_idx2);
  init_symbol(&symbols[5u], "idx3", SYM_MODULE, &INST_idx3);
  init_symbol(&symbols[6u], "init", SYM_MODULE, &INST_init);
  init_symbol(&symbols[7u], "init2", SYM_MODULE, &INST_init2);
  init_symbol(&symbols[8u], "px", SYM_MODULE, &INST_px);
  init_symbol(&symbols[9u], "RL_configure", SYM_RULE);
  init_symbol(&symbols[10u], "RL_configure2", SYM_RULE);
  init_symbol(&symbols[11u], "RL_cyccount", SYM_RULE);
  init_symbol(&symbols[12u], "RL_receive", SYM_RULE);
  init_symbol(&symbols[13u], "RL_send", SYM_RULE);
  init_symbol(&symbols[14u], "rx", SYM_MODULE, &INST_rx);
  init_symbol(&symbols[15u], "x__h8435", SYM_DEF, &DEF_x__h8435, 32u);
}


/* Rule actions */

void MOD_mkFlowTest::RL_cyccount()
{
  tUInt32 DEF_count_PLUS_1___d2;
  DEF_x__h8435 = INST_count.METH_read();
  DEF_count_PLUS_1___d2 = DEF_x__h8435 + 1u;
  INST_count.METH_write(DEF_count_PLUS_1___d2);
}

void MOD_mkFlowTest::RL_configure2()
{
  tUInt32 DEF_idx3_PLUS_1___d11;
  tUInt8 DEF_idx3_EQ_5___d12;
  tUInt32 DEF_IF_idx3_EQ_4_THEN_24_ELSE_0___d10;
  tUInt32 DEF_b__h457;
  DEF_b__h457 = INST_idx3.METH_read();
  DEF_IF_idx3_EQ_4_THEN_24_ELSE_0___d10 = DEF_b__h457 == 4u ? 24u : 0u;
  DEF_idx3_EQ_5___d12 = DEF_b__h457 == 5u;
  DEF_idx3_PLUS_1___d11 = 65535u & (DEF_b__h457 + 1u);
  INST_px.METH_loadConfig(DEF_IF_idx3_EQ_4_THEN_24_ELSE_0___d10);
  INST_idx3.METH_write(DEF_idx3_PLUS_1___d11);
  if (DEF_idx3_EQ_5___d12)
    INST_init.METH_write((tUInt8)1u);
}

void MOD_mkFlowTest::RL_configure()
{
  tUInt32 DEF_idx_4_PLUS_1___d25;
  tUInt32 DEF_idx2_6_PLUS_1___d23;
  tUInt8 DEF_NOT_idx_4_ULT_3_5___d22;
  tUInt8 DEF_b__h721;
  tUInt8 DEF_idx_4_EQ_27___d24;
  tUInt8 DEF_idx_4_ULT_3___d15;
  tUInt32 DEF_IF_idx_4_ULT_3_5_THEN_32_ELSE_0_CONCAT_0_CONCA_ETC___d21;
  tUInt32 DEF_b__h610;
  tUInt32 DEF_b__h765;
  DEF_b__h765 = INST_idx2.METH_read();
  DEF_b__h610 = INST_idx.METH_read();
  DEF_idx_4_ULT_3___d15 = DEF_b__h610 < 3u;
  DEF_idx_4_EQ_27___d24 = DEF_b__h610 == 27u;
  DEF_b__h721 = (tUInt8)255u & (((tUInt8)((tUInt8)7u & (65535u & (7u - DEF_b__h765)))) << 2u);
  DEF_IF_idx_4_ULT_3_5_THEN_32_ELSE_0_CONCAT_0_CONCA_ETC___d21 = DEF_idx_4_ULT_3___d15 ? 32u : 65535u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_b__h721));
  DEF_NOT_idx_4_ULT_3_5___d22 = !DEF_idx_4_ULT_3___d15;
  DEF_idx2_6_PLUS_1___d23 = 65535u & (DEF_b__h765 + 1u);
  DEF_idx_4_PLUS_1___d25 = 65535u & (DEF_b__h610 + 1u);
  INST_px.METH_loadConfig(DEF_IF_idx_4_ULT_3_5_THEN_32_ELSE_0_CONCAT_0_CONCA_ETC___d21);
  if (DEF_NOT_idx_4_ULT_3_5___d22)
    INST_idx2.METH_write(DEF_idx2_6_PLUS_1___d23);
  if (DEF_idx_4_EQ_27___d24)
    INST_init2.METH_write((tUInt8)1u);
  INST_idx.METH_write(DEF_idx_4_PLUS_1___d25);
}

void MOD_mkFlowTest::RL_send()
{
  tUInt32 DEF_rx_0_PLUS_1___d41;
  tUInt32 DEF_n_i__h5216;
  tUInt32 DEF_x__h3192;
  tUInt32 DEF_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10_7_BIT_ETC___d51;
  tUInt8 DEF_cx_6_EQ_20___d37;
  tUInt32 DEF_IF_cx_6_EQ_20_7_THEN_0_ELSE_cx_6_PLUS_1_8___d39;
  tUInt32 DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10___d47;
  tUInt8 DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10_7_BIT_9___d48;
  tUInt32 DEF_b__h1042;
  tUInt32 DEF_b__h977;
  DEF_b__h977 = INST_cx.METH_read();
  DEF_b__h1042 = INST_rx.METH_read();
  DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10___d47 = 1023u & (((tUInt32)(1023u & (1048575u & (DEF_b__h1042 * DEF_b__h977)))) + 10u);
  DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10_7_BIT_9___d48 = (tUInt8)(DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10___d47 >> 9u);
  DEF_cx_6_EQ_20___d37 = DEF_b__h977 == 20u;
  DEF_IF_cx_6_EQ_20_7_THEN_0_ELSE_cx_6_PLUS_1_8___d39 = DEF_cx_6_EQ_20___d37 ? 0u : 1023u & (DEF_b__h977 + 1u);
  DEF_x__h3192 = DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10_7_BIT_9___d48 ? 1023u & -DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10___d47 : DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10___d47;
  DEF_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10_7_BIT_ETC___d51 = 1023u & (DEF_x__h3192 % 255u);
  DEF_n_i__h5216 = primSignExt32(15u,
				 10u,
				 (tUInt32)(DEF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10_7_BIT_9___d48 ? 1023u & -DEF_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10_7_BIT_ETC___d51 : DEF_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_PLUS_10_7_BIT_ETC___d51));
  DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55.set_whole_word(primExtract32(32u,
											     496u,
											     UWide_literal_496_h0,
											     32u,
											     495u,
											     32u,
											     464u),
									       15u).set_whole_word(primExtract32(32u,
														 496u,
														 UWide_literal_496_h0,
														 32u,
														 463u,
														 32u,
														 432u),
												   14u).set_whole_word(primExtract32(32u,
																     496u,
																     UWide_literal_496_h0,
																     32u,
																     431u,
																     32u,
																     400u),
														       13u).set_whole_word(primExtract32(32u,
																			 496u,
																			 UWide_literal_496_h0,
																			 32u,
																			 399u,
																			 32u,
																			 368u),
																	   12u).set_whole_word(primExtract32(32u,
																					     496u,
																					     UWide_literal_496_h0,
																					     32u,
																					     367u,
																					     32u,
																					     336u),
																			       11u).set_whole_word(primExtract32(32u,
																								 496u,
																								 UWide_literal_496_h0,
																								 32u,
																								 335u,
																								 32u,
																								 304u),
																						   10u).set_whole_word(primExtract32(32u,
																										     496u,
																										     UWide_literal_496_h0,
																										     32u,
																										     303u,
																										     32u,
																										     272u),
																								       9u).set_whole_word(primExtract32(32u,
																													496u,
																													UWide_literal_496_h0,
																													32u,
																													271u,
																													32u,
																													240u),
																											  8u).set_whole_word(primExtract32(32u,
																															   496u,
																															   UWide_literal_496_h0,
																															   32u,
																															   239u,
																															   32u,
																															   208u),
																													     7u).set_whole_word(primExtract32(32u,
																																	      496u,
																																	      UWide_literal_496_h0,
																																	      32u,
																																	      207u,
																																	      32u,
																																	      176u),
																																6u).set_whole_word(primExtract32(32u,
																																				 496u,
																																				 UWide_literal_496_h0,
																																				 32u,
																																				 175u,
																																				 32u,
																																				 144u),
																																		   5u).set_whole_word(primExtract32(32u,
																																						    496u,
																																						    UWide_literal_496_h0,
																																						    32u,
																																						    143u,
																																						    32u,
																																						    112u),
																																				      4u).set_whole_word(primExtract32(32u,
																																								       496u,
																																								       UWide_literal_496_h0,
																																								       32u,
																																								       111u,
																																								       32u,
																																								       80u),
																																							 3u).set_whole_word(primExtract32(32u,
																																											  496u,
																																											  UWide_literal_496_h0,
																																											  32u,
																																											  79u,
																																											  32u,
																																											  48u),
																																									    2u).set_whole_word(primExtract32(32u,
																																													     496u,
																																													     UWide_literal_496_h0,
																																													     32u,
																																													     47u,
																																													     32u,
																																													     16u),
																																											       1u).set_whole_word(((UWide_literal_496_h0.get_bits_in_word32(0u,
																																																			    0u,
																																																			    16u) << 16u) | (DEF_n_i__h5216 << 1u)) | (tUInt32)((tUInt8)0u),
																																														  0u);
  DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56 = primSLT8(1u,
									  10u,
									  (tUInt32)(DEF_b__h977),
									  10u,
									  16u) && primSLT8(1u,
											   10u,
											   (tUInt32)(DEF_b__h1042),
											   10u,
											   16u) ? DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55 : UWide_literal_512_h0;
  DEF_rx_0_PLUS_1___d41 = 1023u & (DEF_b__h1042 + 1u);
  INST_cx.METH_write(DEF_IF_cx_6_EQ_20_7_THEN_0_ELSE_cx_6_PLUS_1_8___d39);
  if (DEF_cx_6_EQ_20___d37)
    INST_rx.METH_write(DEF_rx_0_PLUS_1___d41);
  INST_px.METH_put(DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56);
}

void MOD_mkFlowTest::RL_receive()
{
  tUInt32 DEF_col_2_PLUS_1___d63;
  tUInt8 DEF_col_2_EQ_195___d64;
  tUInt32 DEF_b__h8775;
  tUInt32 DEF_signed_px_get_9_BITS_47_TO_33_0___d61;
  tUWide DEF_AVMeth_px_get(128u, false);
  DEF_b__h8775 = INST_col.METH_read();
  DEF_col_2_EQ_195___d64 = DEF_b__h8775 == 195u;
  DEF_col_2_PLUS_1___d63 = DEF_b__h8775 + 1u;
  DEF_AVMeth_px_get = INST_px.METH_get();
  DEF_px_get___d59 = DEF_AVMeth_px_get;
  DEF_signed_px_get_9_BITS_47_TO_33_0___d61 = DEF_px_get___d59.get_bits_in_word32(1u, 1u, 15u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-15", &__str_literal_1, DEF_signed_px_get_9_BITS_47_TO_33_0___d61);
  INST_col.METH_write(DEF_col_2_PLUS_1___d63);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_col_2_EQ_195___d64)
      dollar_finish(sim_hdl, "32", 0u);
}


/* Methods */


/* Reset routines */

void MOD_mkFlowTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rx.reset_RST(ARG_rst_in);
  INST_px.reset_RST_N(ARG_rst_in);
  INST_init2.reset_RST(ARG_rst_in);
  INST_init.reset_RST(ARG_rst_in);
  INST_idx3.reset_RST(ARG_rst_in);
  INST_idx2.reset_RST(ARG_rst_in);
  INST_idx.reset_RST(ARG_rst_in);
  INST_cx.reset_RST(ARG_rst_in);
  INST_count.reset_RST(ARG_rst_in);
  INST_col.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFlowTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFlowTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_col.dump_state(indent + 2u);
  INST_count.dump_state(indent + 2u);
  INST_cx.dump_state(indent + 2u);
  INST_idx.dump_state(indent + 2u);
  INST_idx2.dump_state(indent + 2u);
  INST_idx3.dump_state(indent + 2u);
  INST_init.dump_state(indent + 2u);
  INST_init2.dump_state(indent + 2u);
  INST_px.dump_state(indent + 2u);
  INST_rx.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkFlowTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 14u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56", 512u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "px_get___d59", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h8435", 32u);
  num = INST_col.dump_VCD_defs(num);
  num = INST_count.dump_VCD_defs(num);
  num = INST_cx.dump_VCD_defs(num);
  num = INST_idx.dump_VCD_defs(num);
  num = INST_idx2.dump_VCD_defs(num);
  num = INST_idx3.dump_VCD_defs(num);
  num = INST_init.dump_VCD_defs(num);
  num = INST_init2.dump_VCD_defs(num);
  num = INST_rx.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_px.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFlowTest::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFlowTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkFlowTest::vcd_defs(tVCDDumpType dt, MOD_mkFlowTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56) != DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56, 512u);
	backing.DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56 = DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55) != DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55, 512u);
	backing.DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55 = DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55;
      }
      ++num;
      if ((backing.DEF_px_get___d59) != DEF_px_get___d59)
      {
	vcd_write_val(sim_hdl, num, DEF_px_get___d59, 128u);
	backing.DEF_px_get___d59 = DEF_px_get___d59;
      }
      ++num;
      if ((backing.DEF_x__h8435) != DEF_x__h8435)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h8435, 32u);
	backing.DEF_x__h8435 = DEF_x__h8435;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56, 512u);
      backing.DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56 = DEF_IF_cx_6_SLT_16_2_AND_rx_0_SLT_16_3_4_THEN_0_CO_ETC___d56;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55, 512u);
      backing.DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55 = DEF__0_CONCAT_SEXT_IF_rx_0_MUL_cx_6_5_BITS_9_TO_0_6_ETC___d55;
      vcd_write_val(sim_hdl, num++, DEF_px_get___d59, 128u);
      backing.DEF_px_get___d59 = DEF_px_get___d59;
      vcd_write_val(sim_hdl, num++, DEF_x__h8435, 32u);
      backing.DEF_x__h8435 = DEF_x__h8435;
    }
}

void MOD_mkFlowTest::vcd_prims(tVCDDumpType dt, MOD_mkFlowTest &backing)
{
  INST_col.dump_VCD(dt, backing.INST_col);
  INST_count.dump_VCD(dt, backing.INST_count);
  INST_cx.dump_VCD(dt, backing.INST_cx);
  INST_idx.dump_VCD(dt, backing.INST_idx);
  INST_idx2.dump_VCD(dt, backing.INST_idx2);
  INST_idx3.dump_VCD(dt, backing.INST_idx3);
  INST_init.dump_VCD(dt, backing.INST_init);
  INST_init2.dump_VCD(dt, backing.INST_init2);
  INST_rx.dump_VCD(dt, backing.INST_rx);
}

void MOD_mkFlowTest::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkFlowTest &backing)
{
  INST_px.dump_VCD(dt, levels, backing.INST_px);
}
