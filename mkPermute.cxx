/*
 * Generated by Bluespec Compiler (build f2da894e)
 * 
 * On Sat Jul 17 19:53:59 IST 2021
 * 
 */
#include "bluesim_primitives.h"
#include "mkPermute.h"


/* Constructor */
MOD_mkPermute::MOD_mkPermute(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_i0(simHdl, "i0", this, 1024u),
    INST_i1(simHdl, "i1", this, 512u),
    INST_i2(simHdl, "i2", this, 256u),
    INST_i3(simHdl, "i3", this, 128u),
    INST_outR(simHdl, "outR", this, 16u, 0u, (tUInt8)0u),
    INST_p0_rv(simHdl, "p0_rv", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_p1_rv(simHdl, "p1_rv", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_p2_rv(simHdl, "p2_rv", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_p3_rv(simHdl, "p3_rv", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_p4_rv(simHdl, "p4_rv", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_probe(simHdl, "probe", this, 6u, (tUInt8)0u, (tUInt8)0u),
    INST_sft(simHdl, "sft", this, 7u, (tUInt8)0u, (tUInt8)0u),
    INST_stripIndex(simHdl, "stripIndex", this, 2u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_i0__h11487(1024u),
    DEF_i1__h22871(512u),
    DEF_i2__h28703(256u),
    DEF_i3__h31293(128u),
    DEF_i0_BITS_1023_TO_512___d4(512u),
    DEF_i0_BITS_511_TO_0___d5(512u),
    DEF_i1_BITS_511_TO_256___d9(256u),
    DEF_i1_BITS_255_TO_0___d10(256u),
    DEF_i2_3_BITS_255_TO_128___d14(128u),
    DEF_i2_3_BITS_127_TO_0___d15(128u),
    DEF_x__h30255(128u),
    DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6(512u),
    DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11(256u),
    DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16(128u)
{
  PORT_put_inR.setSize(1024u);
  PORT_put_inR.clear();
  symbol_count = 18u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkPermute::init_symbols_0()
{
  init_symbol(&symbols[0u], "i0", SYM_MODULE, &INST_i0);
  init_symbol(&symbols[1u], "i1", SYM_MODULE, &INST_i1);
  init_symbol(&symbols[2u], "i2", SYM_MODULE, &INST_i2);
  init_symbol(&symbols[3u], "i3", SYM_MODULE, &INST_i3);
  init_symbol(&symbols[4u], "outR", SYM_MODULE, &INST_outR);
  init_symbol(&symbols[5u], "p0_rv", SYM_MODULE, &INST_p0_rv);
  init_symbol(&symbols[6u], "p1_rv", SYM_MODULE, &INST_p1_rv);
  init_symbol(&symbols[7u], "p2_rv", SYM_MODULE, &INST_p2_rv);
  init_symbol(&symbols[8u], "p3_rv", SYM_MODULE, &INST_p3_rv);
  init_symbol(&symbols[9u], "p4_rv", SYM_MODULE, &INST_p4_rv);
  init_symbol(&symbols[10u], "probe", SYM_MODULE, &INST_probe);
  init_symbol(&symbols[11u], "put_inR", SYM_PORT, &PORT_put_inR, 1024u);
  init_symbol(&symbols[12u], "RL__S0", SYM_RULE);
  init_symbol(&symbols[13u], "RL__S1", SYM_RULE);
  init_symbol(&symbols[14u], "RL__S2", SYM_RULE);
  init_symbol(&symbols[15u], "RL__S3", SYM_RULE);
  init_symbol(&symbols[16u], "sft", SYM_MODULE, &INST_sft);
  init_symbol(&symbols[17u], "stripIndex", SYM_MODULE, &INST_stripIndex);
}


/* Rule actions */

void MOD_mkPermute::RL__S0()
{
  tUInt8 DEF_probe_BIT_5___h1311;
  DEF_i0__h11487 = INST_i0.METH_read();
  DEF_probe__h25972 = INST_probe.METH_read();
  wop_primExtractWide(512u,
		      1024u,
		      DEF_i0__h11487,
		      32u,
		      1023u,
		      32u,
		      512u,
		      DEF_i0_BITS_1023_TO_512___d4);
  wop_primExtractWide(512u, 1024u, DEF_i0__h11487, 32u, 511u, 32u, 0u, DEF_i0_BITS_511_TO_0___d5);
  DEF_probe_BIT_5___h1311 = (tUInt8)(DEF_probe__h25972 >> 5u);
  DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6 = DEF_probe_BIT_5___h1311 ? DEF_i0_BITS_1023_TO_512___d4 : DEF_i0_BITS_511_TO_0___d5;
  INST_i1.METH_write(DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6);
}

void MOD_mkPermute::RL__S1()
{
  tUInt8 DEF_probe_BIT_4___h17663;
  DEF_i1__h22871 = INST_i1.METH_read();
  DEF_probe__h25972 = INST_probe.METH_read();
  wop_primExtractWide(256u, 512u, DEF_i1__h22871, 32u, 511u, 32u, 256u, DEF_i1_BITS_511_TO_256___d9);
  wop_primExtractWide(256u, 512u, DEF_i1__h22871, 32u, 255u, 32u, 0u, DEF_i1_BITS_255_TO_0___d10);
  DEF_probe_BIT_4___h17663 = (tUInt8)((tUInt8)1u & (DEF_probe__h25972 >> 4u));
  DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11 = DEF_probe_BIT_4___h17663 ? DEF_i1_BITS_511_TO_256___d9 : DEF_i1_BITS_255_TO_0___d10;
  INST_i2.METH_write(DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11);
}

void MOD_mkPermute::RL__S2()
{
  tUInt8 DEF_probe_BIT_3___h25975;
  DEF_i2__h28703 = INST_i2.METH_read();
  DEF_probe__h25972 = INST_probe.METH_read();
  wop_primExtractWide(128u,
		      256u,
		      DEF_i2__h28703,
		      32u,
		      255u,
		      32u,
		      128u,
		      DEF_i2_3_BITS_255_TO_128___d14);
  wop_primExtractWide(128u, 256u, DEF_i2__h28703, 32u, 127u, 32u, 0u, DEF_i2_3_BITS_127_TO_0___d15);
  DEF_probe_BIT_3___h25975 = (tUInt8)((tUInt8)1u & (DEF_probe__h25972 >> 3u));
  DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16 = DEF_probe_BIT_3___h25975 ? DEF_i2_3_BITS_255_TO_128___d14 : DEF_i2_3_BITS_127_TO_0___d15;
  INST_i3.METH_write(DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16);
}

void MOD_mkPermute::RL__S3()
{
  tUInt8 DEF_x__h31329;
  tUInt8 DEF_sft_BITS_2_TO_0___h31314;
  tUInt32 DEF_x_BITS_15_TO_0___h31331;
  DEF_i3__h31293 = INST_i3.METH_read();
  DEF_sft_BITS_2_TO_0___h31314 = (tUInt8)((tUInt8)7u & INST_sft.METH_read());
  DEF_x__h31329 = (tUInt8)127u & (DEF_sft_BITS_2_TO_0___h31314 << 4u);
  wop_primShiftRWide(128u, 128u, DEF_i3__h31293, 7u, (tUInt8)(DEF_x__h31329), DEF_x__h30255);
  DEF_x_BITS_15_TO_0___h31331 = DEF_x__h30255.get_bits_in_word32(0u, 0u, 16u);
  INST_outR.METH_write(DEF_x_BITS_15_TO_0___h31331);
}


/* Methods */

void MOD_mkPermute::METH_put(tUWide ARG_put_inR)
{
  PORT_put_inR = ARG_put_inR;
  INST_i0.METH_write(ARG_put_inR);
}

tUInt8 MOD_mkPermute::METH_RDY_put()
{
  tUInt8 DEF_CAN_FIRE_put;
  tUInt8 PORT_RDY_put;
  DEF_CAN_FIRE_put = (tUInt8)1u;
  PORT_RDY_put = DEF_CAN_FIRE_put;
  return PORT_RDY_put;
}

void MOD_mkPermute::METH_setIndex(tUInt8 ARG_setIndex_inx)
{
  tUInt8 DEF__0_CONCAT_setIndex_inx_BITS_2_TO_0_3___d24;
  DEF__0_CONCAT_setIndex_inx_BITS_2_TO_0_3___d24 = (tUInt8)127u & ((tUInt8)((tUInt8)7u & ARG_setIndex_inx));
  INST_probe.METH_write(ARG_setIndex_inx);
  INST_sft.METH_write(DEF__0_CONCAT_setIndex_inx_BITS_2_TO_0_3___d24);
}

tUInt8 MOD_mkPermute::METH_RDY_setIndex()
{
  tUInt8 DEF_CAN_FIRE_setIndex;
  tUInt8 PORT_RDY_setIndex;
  DEF_CAN_FIRE_setIndex = (tUInt8)1u;
  PORT_RDY_setIndex = DEF_CAN_FIRE_setIndex;
  return PORT_RDY_setIndex;
}

tUInt32 MOD_mkPermute::METH_get()
{
  tUInt32 DEF_get__avValue1;
  tUInt32 PORT_get;
  DEF_get__avValue1 = INST_outR.METH_read();
  PORT_get = DEF_get__avValue1;
  INST_stripIndex.METH_write((tUInt8)0u);
  return PORT_get;
}

tUInt8 MOD_mkPermute::METH_RDY_get()
{
  tUInt8 DEF_CAN_FIRE_get;
  tUInt8 PORT_RDY_get;
  DEF_CAN_FIRE_get = (tUInt8)1u;
  PORT_RDY_get = DEF_CAN_FIRE_get;
  return PORT_RDY_get;
}


/* Reset routines */

void MOD_mkPermute::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_stripIndex.reset_RST(ARG_rst_in);
  INST_sft.reset_RST(ARG_rst_in);
  INST_probe.reset_RST(ARG_rst_in);
  INST_p4_rv.reset_RST(ARG_rst_in);
  INST_p3_rv.reset_RST(ARG_rst_in);
  INST_p2_rv.reset_RST(ARG_rst_in);
  INST_p1_rv.reset_RST(ARG_rst_in);
  INST_p0_rv.reset_RST(ARG_rst_in);
  INST_outR.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkPermute::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkPermute::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_i0.dump_state(indent + 2u);
  INST_i1.dump_state(indent + 2u);
  INST_i2.dump_state(indent + 2u);
  INST_i3.dump_state(indent + 2u);
  INST_outR.dump_state(indent + 2u);
  INST_p0_rv.dump_state(indent + 2u);
  INST_p1_rv.dump_state(indent + 2u);
  INST_p2_rv.dump_state(indent + 2u);
  INST_p3_rv.dump_state(indent + 2u);
  INST_p4_rv.dump_state(indent + 2u);
  INST_probe.dump_state(indent + 2u);
  INST_sft.dump_state(indent + 2u);
  INST_stripIndex.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkPermute::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 30u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6", 512u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i0_BITS_1023_TO_512___d4", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i0_BITS_511_TO_0___d5", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i0__h11487", 1024u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i1_BITS_255_TO_0___d10", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i1_BITS_511_TO_256___d9", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i1__h22871", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i2_3_BITS_127_TO_0___d15", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i2_3_BITS_255_TO_128___d14", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i2__h28703", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "i3__h31293", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "probe__h25972", 6u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h30255", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "put_inR", 1024u);
  num = INST_i0.dump_VCD_defs(num);
  num = INST_i1.dump_VCD_defs(num);
  num = INST_i2.dump_VCD_defs(num);
  num = INST_i3.dump_VCD_defs(num);
  num = INST_outR.dump_VCD_defs(num);
  num = INST_p0_rv.dump_VCD_defs(num);
  num = INST_p1_rv.dump_VCD_defs(num);
  num = INST_p2_rv.dump_VCD_defs(num);
  num = INST_p3_rv.dump_VCD_defs(num);
  num = INST_p4_rv.dump_VCD_defs(num);
  num = INST_probe.dump_VCD_defs(num);
  num = INST_sft.dump_VCD_defs(num);
  num = INST_stripIndex.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkPermute::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPermute &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkPermute::vcd_defs(tVCDDumpType dt, MOD_mkPermute &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 1024u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 6u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 1024u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16) != DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16, 128u);
	backing.DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16 = DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16;
      }
      ++num;
      if ((backing.DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11) != DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11, 256u);
	backing.DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11 = DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11;
      }
      ++num;
      if ((backing.DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6) != DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6, 512u);
	backing.DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6 = DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_i0_BITS_1023_TO_512___d4) != DEF_i0_BITS_1023_TO_512___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_i0_BITS_1023_TO_512___d4, 512u);
	backing.DEF_i0_BITS_1023_TO_512___d4 = DEF_i0_BITS_1023_TO_512___d4;
      }
      ++num;
      if ((backing.DEF_i0_BITS_511_TO_0___d5) != DEF_i0_BITS_511_TO_0___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_i0_BITS_511_TO_0___d5, 512u);
	backing.DEF_i0_BITS_511_TO_0___d5 = DEF_i0_BITS_511_TO_0___d5;
      }
      ++num;
      if ((backing.DEF_i0__h11487) != DEF_i0__h11487)
      {
	vcd_write_val(sim_hdl, num, DEF_i0__h11487, 1024u);
	backing.DEF_i0__h11487 = DEF_i0__h11487;
      }
      ++num;
      if ((backing.DEF_i1_BITS_255_TO_0___d10) != DEF_i1_BITS_255_TO_0___d10)
      {
	vcd_write_val(sim_hdl, num, DEF_i1_BITS_255_TO_0___d10, 256u);
	backing.DEF_i1_BITS_255_TO_0___d10 = DEF_i1_BITS_255_TO_0___d10;
      }
      ++num;
      if ((backing.DEF_i1_BITS_511_TO_256___d9) != DEF_i1_BITS_511_TO_256___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_i1_BITS_511_TO_256___d9, 256u);
	backing.DEF_i1_BITS_511_TO_256___d9 = DEF_i1_BITS_511_TO_256___d9;
      }
      ++num;
      if ((backing.DEF_i1__h22871) != DEF_i1__h22871)
      {
	vcd_write_val(sim_hdl, num, DEF_i1__h22871, 512u);
	backing.DEF_i1__h22871 = DEF_i1__h22871;
      }
      ++num;
      if ((backing.DEF_i2_3_BITS_127_TO_0___d15) != DEF_i2_3_BITS_127_TO_0___d15)
      {
	vcd_write_val(sim_hdl, num, DEF_i2_3_BITS_127_TO_0___d15, 128u);
	backing.DEF_i2_3_BITS_127_TO_0___d15 = DEF_i2_3_BITS_127_TO_0___d15;
      }
      ++num;
      if ((backing.DEF_i2_3_BITS_255_TO_128___d14) != DEF_i2_3_BITS_255_TO_128___d14)
      {
	vcd_write_val(sim_hdl, num, DEF_i2_3_BITS_255_TO_128___d14, 128u);
	backing.DEF_i2_3_BITS_255_TO_128___d14 = DEF_i2_3_BITS_255_TO_128___d14;
      }
      ++num;
      if ((backing.DEF_i2__h28703) != DEF_i2__h28703)
      {
	vcd_write_val(sim_hdl, num, DEF_i2__h28703, 256u);
	backing.DEF_i2__h28703 = DEF_i2__h28703;
      }
      ++num;
      if ((backing.DEF_i3__h31293) != DEF_i3__h31293)
      {
	vcd_write_val(sim_hdl, num, DEF_i3__h31293, 128u);
	backing.DEF_i3__h31293 = DEF_i3__h31293;
      }
      ++num;
      if ((backing.DEF_probe__h25972) != DEF_probe__h25972)
      {
	vcd_write_val(sim_hdl, num, DEF_probe__h25972, 6u);
	backing.DEF_probe__h25972 = DEF_probe__h25972;
      }
      ++num;
      if ((backing.DEF_x__h30255) != DEF_x__h30255)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h30255, 128u);
	backing.DEF_x__h30255 = DEF_x__h30255;
      }
      ++num;
      if ((backing.PORT_put_inR) != PORT_put_inR)
      {
	vcd_write_val(sim_hdl, num, PORT_put_inR, 1024u);
	backing.PORT_put_inR = PORT_put_inR;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16, 128u);
      backing.DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16 = DEF_IF_probe_BIT_3_2_THEN_i2_3_BITS_255_TO_128_4_E_ETC___d16;
      vcd_write_val(sim_hdl, num++, DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11, 256u);
      backing.DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11 = DEF_IF_probe_BIT_4_THEN_i1_BITS_511_TO_256_ELSE_i1_ETC___d11;
      vcd_write_val(sim_hdl, num++, DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6, 512u);
      backing.DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6 = DEF_IF_probe_BIT_5_THEN_i0_BITS_1023_TO_512_ELSE_i_ETC___d6;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_i0_BITS_1023_TO_512___d4, 512u);
      backing.DEF_i0_BITS_1023_TO_512___d4 = DEF_i0_BITS_1023_TO_512___d4;
      vcd_write_val(sim_hdl, num++, DEF_i0_BITS_511_TO_0___d5, 512u);
      backing.DEF_i0_BITS_511_TO_0___d5 = DEF_i0_BITS_511_TO_0___d5;
      vcd_write_val(sim_hdl, num++, DEF_i0__h11487, 1024u);
      backing.DEF_i0__h11487 = DEF_i0__h11487;
      vcd_write_val(sim_hdl, num++, DEF_i1_BITS_255_TO_0___d10, 256u);
      backing.DEF_i1_BITS_255_TO_0___d10 = DEF_i1_BITS_255_TO_0___d10;
      vcd_write_val(sim_hdl, num++, DEF_i1_BITS_511_TO_256___d9, 256u);
      backing.DEF_i1_BITS_511_TO_256___d9 = DEF_i1_BITS_511_TO_256___d9;
      vcd_write_val(sim_hdl, num++, DEF_i1__h22871, 512u);
      backing.DEF_i1__h22871 = DEF_i1__h22871;
      vcd_write_val(sim_hdl, num++, DEF_i2_3_BITS_127_TO_0___d15, 128u);
      backing.DEF_i2_3_BITS_127_TO_0___d15 = DEF_i2_3_BITS_127_TO_0___d15;
      vcd_write_val(sim_hdl, num++, DEF_i2_3_BITS_255_TO_128___d14, 128u);
      backing.DEF_i2_3_BITS_255_TO_128___d14 = DEF_i2_3_BITS_255_TO_128___d14;
      vcd_write_val(sim_hdl, num++, DEF_i2__h28703, 256u);
      backing.DEF_i2__h28703 = DEF_i2__h28703;
      vcd_write_val(sim_hdl, num++, DEF_i3__h31293, 128u);
      backing.DEF_i3__h31293 = DEF_i3__h31293;
      vcd_write_val(sim_hdl, num++, DEF_probe__h25972, 6u);
      backing.DEF_probe__h25972 = DEF_probe__h25972;
      vcd_write_val(sim_hdl, num++, DEF_x__h30255, 128u);
      backing.DEF_x__h30255 = DEF_x__h30255;
      vcd_write_val(sim_hdl, num++, PORT_put_inR, 1024u);
      backing.PORT_put_inR = PORT_put_inR;
    }
}

void MOD_mkPermute::vcd_prims(tVCDDumpType dt, MOD_mkPermute &backing)
{
  INST_i0.dump_VCD(dt, backing.INST_i0);
  INST_i1.dump_VCD(dt, backing.INST_i1);
  INST_i2.dump_VCD(dt, backing.INST_i2);
  INST_i3.dump_VCD(dt, backing.INST_i3);
  INST_outR.dump_VCD(dt, backing.INST_outR);
  INST_p0_rv.dump_VCD(dt, backing.INST_p0_rv);
  INST_p1_rv.dump_VCD(dt, backing.INST_p1_rv);
  INST_p2_rv.dump_VCD(dt, backing.INST_p2_rv);
  INST_p3_rv.dump_VCD(dt, backing.INST_p3_rv);
  INST_p4_rv.dump_VCD(dt, backing.INST_p4_rv);
  INST_probe.dump_VCD(dt, backing.INST_probe);
  INST_sft.dump_VCD(dt, backing.INST_sft);
  INST_stripIndex.dump_VCD(dt, backing.INST_stripIndex);
}
